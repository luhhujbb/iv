#!/bin/bash

source /etc/iv.config

#################################
# Deps check
#################################

jq_path=$(which jq)
if [ -z "$jq_path" ];
  then
  echo "iv need jq"
  exit 1
fi

curl_path=$(which curl)
if [ -z "$jq_path" ];
  then
  echo "iv need jq"
  exit 1
fi

curl_path=$(which ansible)
if [ -z "$jq_path" -a "$IV_PLAYBOOK" == "true" ];
  then
  echo "iv need ansible"
  exit 1
fi

#################################
# Conf check
#################################

if [ -z "$INVENTORY_SCHEME" ];
  then
    INVENTORY_SCHEME="http"
fi

if [ -z "$INVENTORY_HOST_PORT" ];
  then
    INVENTORY_HOST_PORT="127.0.0.1"
fi

INVENTORY_URL="$INVENTORY_SCHEME://$INVENTORY_HOST_PORT"

##############################
# USAGE
##############################

function usage(){
  echo "Usage of iv cli :"
  echo "* iv get"
  echo " - iv get resource [RESOURCE_ID]"
  echo " - iv get resources [ENV_TAG] [RESOURCE_TYPE_TAG] (--raw-output)"
  echo " - iv get resource-tag [RESOURCE_ID] [TAG] (--raw-output)"
  echo " - iv get resources-tag [RESOURCE_ID] [TAG] (--raw-output)"
  echo "* iv set"
  echo " - iv set resource-tag [RESOURCE_ID] [TAG] [VALUE]"
  echo "* iv del"
  echo " - iv del resource-tag [RESOURCE_ID] [TAG] [VALUE]"
  echo "* iv list"
  echo " - iv list envs"
  echo " - iv list tags"
  echo " - iv list resource-types"
  echo "* iv count"
  echo " - iv count resources [ENV_TAG] [RESOURCE_TYPE_TAG]"
  echo "* iv exec"
  echo " - iv exec [ENV_TAG] [RESOURCE_TYPE_TAG] you cmd goes here"
  echo " - iv alt-exec [ENV_TAG] [RESOURCE_TYPE_TAG] you cmd goes here"
  if [ "$IV_PLAYBOOK" == "true" ];
    then
    echo "* iv playbook"
    echo " - iv playbook [ENV_TAG] [RESOURCE_TYPE_TAG] your ansible playbook"
  fi
}

##############################
# Build filter
##############################

function build_filter(){
  if [ -z "$1" -a -z "$2" ];
  then
    echo -n "{}"
  else
    TAGS=$(echo $2 | sed -e 's/,/","/g')
    TAG_ARRAY="[\"$TAGS\"]"
    echo -n "{\"tags\":[{\"name\":\"$IV_RESOURCE_ENV_TAG\",\"value\":\"$1\"},{\"name\":\"$IV_RESOURCE_TYPE_TAG\",\"value\":$TAG_ARRAY}]}"
  fi
}

function build_tag(){
  if [ -z "$1" -a -z "$2" -a -z "$3" ];
  then
    echo -n "{}"
  else
    echo -n "{\"tags\":[{\"name\":\"$1\",\"value\":\"$2\",\"delete\":$3}]}"
  fi
}

##############################
# GETTER
##############################

function get_resource(){
  if [ ! -z "$1" ];
  then
    curl -s "$INVENTORY_URL/inventory/resource/$1" \
    | jq .data "${@:2}"
  else
    echo "iv get resource [RESOURCE_ID] : missing RESOURCE_ID"
    exit 1
  fi
}

function get_resource_tag(){
  if [ ! -z "$1" ];
  then
    if [ ! -z "$2" ];
    then
      curl -s "$INVENTORY_URL/inventory/resource/$1" \
      | jq .data.$2 "${@:3}"
    else
      echo "iv get resource-tag $1 [TAG]: missing TAG"
      exit 1
    fi
  else
    echo "iv get resource-tag [RESOURCE_ID] [TAG]: missing RESOURCE_ID and TAG"
    exit 1
  fi
}

function get_resources(){
  FILTER=$(build_filter $1 $2)
  curl -s -XPOST "$INVENTORY_URL/inventory/resource" \
       -d $FILTER \
       -H "Content-Type: application/json" \
  | jq .data "${@:3}"
}

function get_resources_tag(){
  FILTER=$(build_filter $1 $2)
  curl -s -XPOST "$INVENTORY_URL/inventory/tag/resource/$3" \
       -d $FILTER \
       -H "Content-Type: application/json" \
  | jq .data[] "${@:4}"
}

##############################
# Setter
##############################

function set_resource_tag(){
  TAG=$(build_tag $2 $3 "false")
  curl -s -XPOST "$INVENTORY_URL/inventory/resource/$1/addtags" \
       -d $TAG \
       -H "Content-Type: application/json" \
  | jq .state "${@:4}"
}

##############################
# Del
##############################

function del_resource_tag(){
  TAG=$(build_tag $2 $3 "true")
  curl -s -XPOST "$INVENTORY_URL/inventory/resource/$1/addtags" \
       -d $TAG \
       -H "Content-Type: application/json" \
  | jq .state "${@:4}"
}


##############################
# Counter
##############################

function count_resources(){
  FILTER=$(build_filter $1 $2)
  curl -s -XPOST "$INVENTORY_URL/inventory/count/resource" \
       -d $FILTER \
       -H "Content-Type: application/json" \
  | jq .data.count "${@:3}"
}

##############################
# LIST
##############################

function list_envs(){
  curl -s -XPOST "$INVENTORY_URL/inventory/tag/resource/$IV_RESOURCE_ENV_TAG" \
  | jq .data[] "$@"
}

function list_tags(){
  curl -s "$INVENTORY_URL/inventory/tag/resource" \
  | jq .data[] "$@"
}

function list_resource_types(){
  curl -s -XPOST "$INVENTORY_URL/inventory/tag/resource/$IV_RESOURCE_TYPE_TAG" \
  | jq .data[] "$@"
}

##############################
# EXEC
##############################

function iv_exec(){
  FILTER=$(build_filter $1 $2)
  HOSTS=$(curl -s -XPOST "$INVENTORY_URL/inventory/tag/resource/$IV_RESOURCE_HOST_TAG" \
       -d $FILTER \
       -H "Content-Type: application/json" \
  | jq .data[] --raw-output)
  for host in $HOSTS
    do
      echo "Executing ssh $IV_USER@$host ${@:3}"
      ssh $IV_USER@$host "${@:3}"
      if [ "$?" == "0" ];
        then
          echo -e ">>>>>>>>>>>>>>>>> \e[32mSUCCESS\e[39m"
      else
        echo -e ">>>>>>>>>>>>>>>>> \e[31mERROR\e[39m"
      fi
    done
}

function iv_alt_exec(){
  FILTER=$(build_filter $1 $2)
  HOSTS=$(curl -s -XPOST "$INVENTORY_URL/inventory/tag/resource/$IV_RESOURCE_HOST_TAG" \
       -d $FILTER \
       -H "Content-Type: application/json" \
  | jq .data[] --raw-output)
  for host in $HOSTS
    do
      echo "Executing ssh $IV_ALT_USER@$host ${@:3}"
      ssh $IV_ALT_USER@$host "${@:3}"
      if [ "$?" == "0" ];
        then
          echo -e ">>>>>>>>>>>>>>>>> \e[32mSUCCESS\e[39m"
      else
        echo -e ">>>>>>>>>>>>>>>>> \e[31mERROR\e[39m"
      fi
    done
}

function iv_playbook(){
  FILTER=$(build_filter $1 $2)
  HOSTS=$(curl -s -XPOST "$INVENTORY_URL/inventory/tag/resource/$IV_RESOURCE_HOST_TAG" \
       -d $FILTER \
       -H "Content-Type: application/json" \
  | jq .data[] --raw-output | paste -sd',')
  HOSTS=$HOSTS","
  ansible-playbook -i "$HOSTS" --user "$IV_USER" "${@:3}"
}


function generic_get(){
  case $1 in
    "resource")
    get_resource "${@:2}"
    ;;
    "resource-tag")
    get_resource_tag "${@:2}"
    ;;
    "resources")
    get_resources "${@:2}"
    ;;
    "resources-tag")
    get_resources_tag "${@:2}"
    ;;
    *)
    echo "resource"
    echo "resources"
    echo "resource-tag"
    echo "resources-tag"
    ;;
  esac
}

function generic_set(){
  case $1 in
    "resource-tag")
    set_resource_tag "${@:2}"
    ;;
    *)
    echo "resource-tag"
    ;;
  esac
}

function generic_del(){
  case $1 in
    "resource-tag")
    del_resource_tag "${@:2}"
    ;;
    *)
    echo "resource-tag"
    ;;
  esac
}

function generic_list(){
  case $1 in
    "tags")
    list_tags "${@:2}"
    ;;
    "envs")
    list_envs "${@:2}"
    ;;
    "resource-types")
    list_resource_types "${@:2}"
    ;;
    *)
    echo "tags"
    echo "envs"
    echo "resource-types"
    ;;
  esac
}

function generic_count(){
  case $1 in
    "resources")
    count_resources "${@:2}"
    ;;
    *)
    echo "resources"
    ;;
  esac
}

case $1 in
  "get")
  generic_get "${@:2}"
  ;;
  "set")
  generic_set "${@:2}"
  ;;
  "count")
  generic_count "${@:2}"
  ;;
  "list")
  generic_list "${@:2}"
  ;;
  "del")
  generic_del "${@:2}"
  ;;
  "exec")
  iv_exec "${@:2}"
  ;;
  "alt-exec")
  iv_alt_exec "${@:2}"
  ;;
  "playbook")
  iv_playbook "${@:2}"
  ;;
  "help")
  usage "${@:2}"
  ;;
  *)
  echo "count"
  echo "get"
  echo "set"
  echo "del"
  echo "list"
  echo "exec"
  echo "alt-exec"
  if [ "$IV_PLAYBOOK" == "true" ];
  then
    echo "playbook"
  fi
  echo "help"
  ;;
esac
